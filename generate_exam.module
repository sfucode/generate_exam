<?php

/*
 * file to select exam for generating pdf copy
 * by Adam Young November 2014
*/

function generate_exam_menu() {
    $items = array();
    $items['generate-exam'] = array(
        'title' => t('Generate an exam'),
        'page callback' => 'generate_exam_form',
        'access arguments' => array('access content'),
        'description' => t('Generate exam from questions'),
        'type' => MENU_CALLBACK,
    );
    return $items;
}
function generate_exam_form() {
    return drupal_get_form('generate_exam_dropdowns_form');
}

function generate_exam_dropdowns_form($form, &$form_state) {
    $options_first = _get_courses();
    $selected = isset($form_state['values']['dropdown_first']) ? $form_state['values']['dropdown_first'] : key($options_first);

    $form['dropdown_first'] = array(
        '#type' => 'select',
        '#title' => 'Course',
        '#options' => $options_first,
        '#default_value' => $selected,
        '#ajax' => array(
            'event' => 'change',
            'callback' => 'generate_exam_dropdowns_form_callback',
            'wrapper' => 'dropdown-second-replace',
        ),
    );

    $form['dropdown_second'] = array(
        '#type' => 'select',
        '#title' => $options_first[$selected] . ' ' . t('Exams'),
        '#prefix' => '<div id="dropdown-second-replace">',
        '#suffix' => '</div>',
        '#options' => _get_exams($selected),
        '#default_value' => isset($form_state['values']['dropdown_second']) ? $form_state['values']['dropdown_second'] : '',
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit'),
    );
    return $form;
}

function generate_exam_dropdowns_form_callback($form, &$form_sate){
    return $form['dropdown_second'];
}

/* ************************ supplemental functions */
function _get_courses() {
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'exam_course')
        ->propertyCondition('status', 1)
        ->propertyOrderBy('title', 'ASC');
    // ->fieldCondition('field_us_state', 'value', array('CT', 'NJ', 'NY'))
    // ->range(0,10);
    $result = $query->execute();
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    $select = array();

    foreach ($nids as $n) {
        $select[$n] = $nodes[$n]->title;
    }

    return $select;
}

function _get_exams($course) {
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'exam_exam')
        ->propertyCondition('status', 1)
        ->propertyOrderBy('title', 'ASC')
        ->fieldCondition('field_exam_course', 'target_id', $course, '=');
    $result = $query->execute();
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    $select = array();

    foreach ($nids as $n) {
        $select[$n] = $nodes[$n]->title;
    }

    return $select;
}

function _get_questions($exam) {
    // get sections
    $query = new EntityFieldQuery();
    $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'exam_section')
        ->propertyCondition('status', 1)
        ->propertyOrderBy('title', 'ASC')
        ->fieldCondition('field_exam_exam', 'target_id', $exam, '=');
    $result = $query->execute();
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);

    $master = array();

    foreach ($nodes as &$node) {
        // $items[$node->nid] = field_get_items('node', $node, 'field_no_of_questions');
        $num = field_get_items('node', $node, 'field_no_of_questions');
        $num_questions = $num[0]['value'];
        $queryQuestion = new EntityFieldQuery();
        $queryQuestion
            ->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'exam_question')
            ->propertyCondition('status', 1)
            ->fieldCondition('field_section', 'target_id', $node->nid, '=')
            ->addTag('random')
            ->range(0,$num_questions);
        $result = $queryQuestion->execute();
        $question_nids = array_keys($result['node']);

        $master[$node->nid] = $question_nids;
    }

    return $master;
}

function generate_exam_query_random_alter($query){
    $query->orderRandom();
}

function _compile_exam($exam) {
    $questions = flatten(_get_questions($exam));

    return $questions;
}

function flatten(array $array) {
    $return = array();
    array_walk_recursive($array, function($a) use (&$return) { $return[] = $a; });
    return $return;
}
